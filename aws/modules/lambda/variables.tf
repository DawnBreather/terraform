#-----------------------------------------------------------
# Global or/and default variables
#-----------------------------------------------------------
variable "name" {
  description = "Name to be used on all resources as prefix"
  default     = "TEST"
}

variable "region" {
  description = "The region where to deploy this code (e.g. us-east-1)."
  default     = "us-west-2"
}

variable "environment" {
    description = "Environment for service"
    default     = "STAGE"
}

variable "orchestration" {
    description = "Type of orchestration"
    default     = "Terraform"
}

variable "createdby" {
    description = "Created by"
    default     = "Vitaliy Natarov"
}

#-----------------------------------------------------------
# AWS lambda provisioned concurrency config
#-----------------------------------------------------------
variable "enable_lambda_provisioned_concurrency_config_alias" {
  description   = "Enable lambda_provisioned_concurrency_config with alias"
  default       = "false"
}

variable "lambda_provisioned_concurrency_config_version" {
  description   = "Enable lambda_provisioned_concurrency_config with version"
  default       = "false"
}

variable "function_name" {
  description = "(Required) Name or Amazon Resource Name (ARN) of the Lambda Function."
  default     = ""
}

variable "provisioned_concurrent_executions" {
  description = "(Required) Amount of capacity to allocate. Must be greater than or equal to 1."
  default     = "1"
}

variable "qualifier" {
  description = "(Required) Lambda Function version or Lambda Alias name."
  default     = ""
}

variable "timeouts_create" {
  description = "(Default 15 minutes) How long to wait for the Lambda Provisioned Concurrency Config to be ready on creation."
  default     = "15m"
}

variable "timeouts_update" {
  description = "(Default 15 minutes) How long to wait for the Lambda Provisioned Concurrency Config to be ready on update."
  default     = "15m"
}

#---------------------------------------------------
# AWS lambda permission
#---------------------------------------------------
variable "enable_lambda_permission_cloudwatch" {
  description = "Enable lambda_permission with cloudwatch"
  default     = "false"
}

variable "enable_lambda_permission_sns" {
  description = "Enable lambda_permission with sns"
  default     = "false"
}

variable "enable_lambda_permission_api_gateway" {
  description = "Enable lambda_permission with api_gateway"
  default     = "false"
}

variable "statement_id" {
  description = "(Optional) A unique statement identifier. By default generated by Terraform."
  default     = ""
}

variable "action" {
  description = "(Required) The AWS Lambda action you want to allow in this statement. (e.g. lambda:InvokeFunction)"
  default     = "lambda:InvokeFunction"
}

variable "function_name" {
  description = "(Required) Name of the Lambda function whose resource policy you are updating"
  default     = ""
}

variable "principal" {
  description = "(Required) The principal who is getting this permission. e.g. s3.amazonaws.com, an AWS account ID, or any valid AWS service principal such as events.amazonaws.com or sns.amazonaws.com."
  default     = ""
}

variable "source_arn" {
  description = "(Optional) When granting Amazon S3 or CloudWatch Events permission to invoke your function, you should specify this field with the Amazon Resource Name (ARN) for the S3 Bucket or CloudWatch Events Rule as its value. This ensures that only events generated from the specified bucket or rule can invoke the function."
  default     = ""
}

variable "qualifier" {
  description = "(Optional) Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN. e.g. arn:aws:lambda:aws-region:acct-id:function:function-name:2"
  default     = ""
}

#---------------------------------------------------
# AWS lambda permission
#---------------------------------------------------
variable "enable_lambda_layer_version" {
  description = "Enable lambda layer_version usage"
  default     = "false"
}

variable "filename" {
  description = "(Optional) The path to the function's deployment package within the local filesystem. If defined, The s3_-prefixed options cannot be used."
  default     = ""
}

variable "layer_name" {
  description = "(Required) A unique name for your Lambda Layer"
  default     = ""
}

variable "compatible_runtimes" {
  description = "(Optional) A list of Runtimes this layer is compatible with. Up to 5 runtimes can be specified."
  default     = ""
}

variable "s3_bucket" {
  description = "(Optional) The S3 bucket location containing the function's deployment package. Conflicts with filename. This bucket must reside in the same AWS region where you are creating the Lambda function."
  default     = ""
}

variable "s3_keys" {
  description = "(Optional) The S3 key of an object containing the function's deployment package. Conflicts with filename."
  default     = ""
}

variable "s3_object_version" {
  description = "(Optional) The object version containing the function's deployment package. Conflicts with filename."
  default     = ""
}

variable "description" {
  description = "(Optional) Description of what your Lambda Layer does."
  default     = ""
}

variable "license_info" {
  description = "(Optional) License info for your Lambda Layer."
  default     = ""
}

variable "source_code_hash " {
  description = "(Optional) Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either filename or s3_key. The usual way to set this is ${filebase64sha256('file.zip')} (Terraform 0.11.12 or later) or ${base64sha256(file("file.zip"))} (Terraform 0.11.11 and earlier), where 'file.zip' is the local filename of the lambda layer source archive."
  default     = ""
}

#---------------------------------------------------
# AWS lambda alias
#---------------------------------------------------
variable "enable_lambda_alias" {
  description = "Enable lambda_alias usage"
  default     = "false"
}

variable "lambda_alias_name" {
  description = "(Required) Name for the alias you are creating. Pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)"
  default     = ""
}

variable "function_version" {
  description = "(Required) Lambda function version for which you are creating the alias. Pattern: (\$LATEST|[0-9]+)."
  default     = ""
}

variable "additional_version_weights" {
  description = "additional_version_weights"
  default     = {
    "2" = 0.5
  }
}

#---------------------------------------------------
# AWS lambda event source mapping
#---------------------------------------------------
variable "enable_lambda_event_source_mapping_dynamodb" {
  description = "Enable lambda_event_source_mapping with dynamodb usage"
  default     = "false"
}

variable "enable_lambda_event_source_mapping_kinesis" {
  description = "Enable lambda_event_source_mapping with kinesis usage"
  default     = "false"
}

variable "enable_lambda_event_source_mapping_sqs" {
  description = "Enable lambda_event_source_mapping with sqs usage"
  default     = "false"
}

variable "event_source_arn" {
  description = "Required) The event source ARN - can be a Kinesis stream, DynamoDB stream, or SQS queue."
  default     = ""
}

variable "starting_position" {
  description = "(Optional) The position in the stream where AWS Lambda should start reading. Must be one of AT_TIMESTAMP (Kinesis only), LATEST or TRIM_HORIZON if getting events from Kinesis or DynamoDB. "
  default     = "LATEST"
}

#---------------------------------------------------
# AWS lambda function
#---------------------------------------------------
variable "enable_lambda_function" {
  description = "Enable lambda function usage"
  default     = "false"
}

variable "role" {
  description = "(Required) IAM role attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to"
  default     = ""
}

variable "handler" {
  description = "(Required) The function entrypoint in your code."
  default     = ""
}

variable "runtime" {
  description = "(Required) See Runtimes for valid values."
  default     = ""
}

variable "env_vars" {
  description = "(Optional) A map that defines environment variables for the Lambda function."
  default     = {}
}
